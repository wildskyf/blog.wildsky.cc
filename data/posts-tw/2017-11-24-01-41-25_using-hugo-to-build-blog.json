{
  "guid": "http://blog.wildsky.cc/?p=172",
  "date": "2017-11-24T01:41:25",
  "slug": "using-hugo-to-build-blog",
  "link": "/posts/using-hugo-to-build-blog/",
  "title": "使用 Hugo 來建 blog",
  "excerpt": "<p>最近開始想要學點後端的東西，WM 便建議我可以去學 Golang，於是我就將身邊會用的幾 個東西變得跟 Gol&#8230;</p>\n",
  "feature_image_url": null,
  "content": "\n<p>最近開始想要學點後端的東西，WM 便建議我可以去學 Golang，於是我就將身邊會用的幾 個東西變得跟 Golang 相關：</p>\n\n\n\n<ul><li>server =&gt; 使用 caddy</li><li>static website generator =&gt; 使用 hugo</li><li>… 好像就這樣XD</li></ul>\n\n\n\n<!--more-->\n\n\n\n<h1 id=\"caddy\">caddy</h1>\n\n\n\n<p>可以去參考一下他的官網<sup><a href=\"http://localhost:1313/posts/using-hugo-as-blog/#fn:1\">1</a></sup>，主打自動 http2 + https，在這個時代沒有 https 都讓 人心生不安。除了自動 https 之外，他還可以接 github 的 webhook，不過有點尷尬的 是我一直接錯，直到寫這篇文章的前兩分鐘才接起來，之後我只要&nbsp;<code>git push origin master</code>&nbsp;他就會自動幫我 deploy 到機器上了～</p>\n\n\n\n<p>順帶一提我接錯的點好了，在&nbsp;<code>&lt;https://github.com/&lt;username&gt;/&lt;repo_name&gt;/settings/hooks/&gt;</code>&nbsp;中可以新增 webhook 其中會有一個 Payload URL，這邊是填你要讓 hook 戳的網址，像是&nbsp;<code>https://example.com/webhook</code>，這樣 github 在收到 event 時， 就會發一個 request （之類的東西XD）到這個網址。</p>\n\n\n\n<p>然後是 Caddy 的設定，基本上就是一個 Caddyfile 裡面一堆潮狀結構，如下：</p>\n\n\n\n<pre class=\"wp-block-code\"><code>example.com {\n        tls email@example.com\n        root /var/www/example.com/public\n        gzip\n        git github.com/&lt;username>/&lt;reponame> {\n                path /var/www/example.com/\n                clone_args --recursive\n                pull_args --recurse-submodules\n                interval -1\n                hook /webhook &lt;secret-key>\n                hook_type github\n                then hugo --destination=/var/www/blog.wildsky.cc/public\n        }\n        hugo\n}\n</code></pre>\n\n\n\n<p>其中值得一提的是，在 git 下面有個 hook 裡面要填 網址 和 secret-key，這邊指的網 址就是你預計會被 GitHub 戳的那個，我好像因為看了好幾篇不同人寫的文章，設定混在 一起，結果兩個對不上，auto-deploy 就沒反應了…</p>\n\n\n\n<h1 id=\"hugo\">hugo</h1>\n\n\n\n<p>基本上靜態網站生成器其實也都差不多，比較有趣的是他有 theme 的系統，所以可以直 接&nbsp;<code>git submodule add https://github.com/wildskyf/hugo-theme-ws themes/ws</code>&nbsp;然 後修改&nbsp;<code>config.toml</code>&nbsp;裡面的&nbsp;<code>theme = 'ws'</code>&nbsp;就能夠使用別人做的 theme。</p>\n\n\n\n<p>除此之外，他還支援 subtheme，所以我可以直接用 ws 這個主題當底，然後加上自己想 要的結構、樣式，真的非常地彈性，像我現在的部落格主題就是基於 kiss 修改的， 從我的部落格的 repo<sup><a href=\"http://localhost:1313/posts/using-hugo-as-blog/#fn:3\">3</a></sup>&nbsp;可以看到我可以在&nbsp;<code>layouts/</code>、<code>static/css/custom.css</code>&nbsp;下修改 東西，他就會直接覆蓋掉主題裡面相對應的檔案，像&nbsp;<code>layouts/index.html</code>&nbsp;就會蓋掉&nbsp;<code>themes/kiss/layouts/index.html</code>。</p>\n\n\n\n<p>突然想到還有踩到一個雷，kiss 這個主題裡面有定義一個 data，放在&nbsp;<code>data/</code>&nbsp;這個資 料夾下，但是我當時的 hugo 的版本（v0.30.2）似乎讀不到&nbsp;<code>data/</code>&nbsp;下&nbsp;<code>.toml</code>&nbsp;的檔，直到我更新 後（v0.31）才沒這個問題，有空再去翻一下 commit 好了。</p>\n\n\n\n<h1 id=\"後話\">後話</h1>\n\n\n\n<p>等部落格到一段落，我就要去讀＆試用看看 golang 的 net/http 了，之後再去看 gozilla/mux，好多事情可以做啊！</p>\n\n\n\n<hr class=\"wp-block-separator\"/>\n\n\n\n<ol><li><a href=\"https://caddyserver.com/\">https://caddyserver.com/</a></li><li><a href=\"https://github.com/ribice/kiss/\">https://github.com/ribice/kiss/</a></li><li><a href=\"https://github.com/wildskyf/blog.wildsky.cc/\">https://github.com/wildskyf/blog.wildsky.cc/</a></li></ol>\n"
}